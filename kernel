Process = r ~> Context


ProcessInfo = record {
    pid : Int // Process id
    ruid : Int // Real user id (user, who started the process)
    rgid : Int // Real group id
    euid : Int // Effective user id (may be different from real if file has suid bit : euid = file owner id)
    egid : Int // Effective gid (may be different from real if file has sgid bit : egid = file group id)
    ppid : Int // Parent process id
    gids : [Int] // Additional gids of user running the process
    pwd : Path // Current working directory
    namespace : Map<Path, Inode*> // Mount table
    fdTable : Map<int, FdId> // File descriptors used by process
}

FdId = record {
    fdInfo : FdInfo
    data : Ptr // Pointer to file data
}

FdInfo = record {
    flags: Set // Modes for the file (read / write)
    SeekPos: VeryLongInt
}

Inode = record { // File system unit that describes a file
    type: File | Dir 
    atime : datetime // Last access time
    mtime : datetime // Last modification time
    modes : Int // Modifiers : 4 octal numbers(first for owner of file, second for users who are members of the file's group, third for
                // users who are not the owner of the file or members of the group, fourth for all three of the above).
                // Every number constists of three bits : 001 - execute only, 010 - write only, 100 - read only. 
                // Example: 011 - write and execute. 


    owner : Int
    group : Int
    data: IDataType* // Pointer to first data segment of a file or a segment with directory entries
}

Registers = record {
    hr0
    hr1
    hr2 
    hr3
    .....
}

HD = record {
    mmu: PointerTable // Data structure that stores memory mapping and can allocate memory
    registers: Registers // Processor registers that must be saved during process execution
}

r~> Context = record {
    ret: *r // Consider this an operator() (r)
    processInfo: ProcessInfo
    kas: *HD // Kernel address space, see HD description

}

Context = record {
    tag: SyscallTag // Number of syscall
    Argv: Arg tag // Arguments that should be passed to syscall
    Cont: Process(Ret tag) // Continuation of the process. Result of syscall execution will be passed as its argument
}



kernel() {
    // Processes that can be runned immediately
    runnableProcesses = []

    // Processes waiting for some syscall to complete
    waitingProcesses : Map<SyscallTag, [Pair<Process, Context>]>

    // Currently sleeping processes
    schedule : Map<pid, time_t>

    while true {

        // Waking up
        foreach(process, context in waitingProcesses[sleepTag]) {
            if (schedule[process.pid] <= currentTime) {
               waitingProcesses[sleepTag].remove(process)
               runnableProcesses.append(new Process(process.pid, context.cont(0), ...)
            }
        }

       // Getting current process
        curProc = head(runnableProcesses)
        // TODO: maybe we have to store syscall return value with process in runnableProcesses. And exec function should execute due to this value
        context = curProc.exec()


        // Executing syscalls
        switch context.tag {
            case forkTag:
                int pid = newPid()
                runnableProcesses.append(new Process(pid, context.cont(0), ...))
                runnableProcesses.append(new Process(curProc.pid, context.cont(pid), ...))
                break
            case sleepTag:
                waitingProcesses.put(sleepTag, {curProc, context});
                break
            case writeTag:
                fdId = curProc.fdTable[context.argv[0]]
                if (fdId == NULL || fdId.flags & FLG_WRITE == 0) {
                    runnableProcesses.append(new Process(curProc.pid, context.cont(-1), ...))
                buf = context.argv[1]
                count = context.argv[2]
                result = getDeviceDriver(fdId.data).write(buf, count)
                runnableProcesses.append(new Process(curProc.pid, context.cont(result), ...))
                break
        }
    } 

}
